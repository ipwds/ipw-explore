'use client';
import React, { useMemo, useState } from 'react';

const IPW = {
  navy: '#003366',
  grey: '#666666',
  beige1: '#B4A597',
  beige4: '#BDAEA5',
};

type Form = {
  property: {
    budget: string;
    suburbs: string;
    propertyTypes: string;
    amysApartmentOption: boolean;
    focusFamilyHome: boolean;
    timeframe: string;
  };
  funding: {
    savingsAud: string;
    savingsOverseas: string;
    inheritances: string;
    mortgages: string;
    shares: string;
    otherLiquid: string;
  };
  incomeTax: {
    employment: string;
    equity: string;
    residency: 'Non-resident' | 'Establish Australian residency' | 'Undecided';
    taxAdvice: string;
  };
  family: {
    childrenPlan: 'Yes' | 'No' | 'Undecided';
    livingArrangements: string;
    schoolingChildcare: string;
  };
  other: {
    returnTimeline: string;
    concerns: string[];
    notes: string;
    investmentVsPPR: 'Principal residence only' | 'Compare investment property and principal residence';
  };
  contact: {
    fullName: string;
    email: string;
    phone: string;
    consent: boolean;
  };
};

export default function Page() {
  const [form, setForm] = useState<Form>({
    property: { budget: '', suburbs: '', propertyTypes: '', amysApartmentOption: false, focusFamilyHome: true, timeframe: '' },
    funding: { savingsAud: '', savingsOverseas: '', inheritances: '', mortgages: '', shares: '', otherLiquid: '' },
    incomeTax: { employment: '', equity: '', residency: 'Undecided', taxAdvice: '' },
    family: { childrenPlan: 'Undecided', livingArrangements: '', schoolingChildcare: '' },
    other: { returnTimeline: '', concerns: [], notes: '', investmentVsPPR: 'Principal residence only' },
    contact: { fullName: '', email: '', phone: '', consent: false },
  });
  const [submitting, setSubmitting] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const concernsList = ['Foreign purchaser duty', 'Stamp duty (NSW concessions/thresholds)', 'Tax implications (non-resident)', 'Financing while overseas'];

  const valid = useMemo(() => !!form.contact.fullName && !!form.contact.email && form.contact.consent, [form]);

  function handleConcern(value: string) {
    setForm(f => {
      const has = f.other.concerns.includes(value);
      return { ...f, other: { ...f.other, concerns: has ? f.other.concerns.filter(c => c !== value) : [...f.other.concerns, value] } };
    });
  }

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!valid) return;
    setSubmitting(true);
    try {
      // TODO: replace with your API/webhook if needed
      console.log('IPW Fact Finder payload:', form);
      setSubmitted(true);
    } finally {
      setSubmitting(false);
    }
  }

  if (submitted) {
    return (
      <main className="min-h-screen p-6" style={{ background: `linear-gradient(135deg, ${IPW.beige4}, ${IPW.beige1})` }}>
        <div className="max-w-3xl mx-auto">
          <Header />
          <div className="bg-white rounded-2xl shadow p-6 mt-6">
            <h1 className="text-2xl font-semibold" style={{ color: IPW.navy }}>Thank you</h1>
            <p className="mt-2" style={{ color: IPW.grey }}>We’ve received your checklist. We’ll model your objectives and follow up at our next meeting.</p>
            <button
              className="mt-6 rounded-2xl px-5 py-2 text-white"
              style={{ backgroundColor: IPW.navy }}
              onClick={() => setSubmitted(false)}
            >
              Back to form
            </button>
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="min-h-screen p-6" style={{ background: `linear-gradient(135deg, ${IPW.beige4}, ${IPW.beige1})` }}>
      <div className="max-w-5xl mx-auto">
        <Header />
        <p className="mt-4 text-sm" style={{ color: IPW.grey }}>
          Ahead of our next meeting, please complete this checklist. It will help us model your objectives, funding position,
          property purchase strategy, and family planning in detail.
        </p>

        <form onSubmit={onSubmit} className="mt-6 space-y-6">
          {/* 1. Property Objectives */}
          <Section title="1. Property Objectives" subtitle="Define brief and timing.">
            <Input label="Preferred budget range (AUD)" placeholder="e.g., $1.6m – $2.2m"
              value={form.property.budget} onChange={e => setForm({ ...form, property: { ...form.property, budget: (e.target as HTMLInputElement).value } })} />
            <Input label="Desired purchase timeframe" placeholder="e.g., within 6–12 months"
              value={form.property.timeframe} onChange={e => setForm({ ...form, property: { ...form.property, timeframe: (e.target as HTMLInputElement).value } })} />
            <TextArea label="Preferred suburbs/locations" placeholder="List areas and any non-negotiables"
              value={form.property.suburbs} onChange={e => setForm({ ...form, property: { ...form.property, suburbs: (e.target as HTMLTextAreaElement).value } })} />
            <TextArea label="Preferred property types" placeholder="House, townhouse, apartment; min beds/baths"
              value={form.property.propertyTypes} onChange={e => setForm({ ...form, property: { ...form.property, propertyTypes: (e.target as HTMLTextAreaElement).value } })} />
            <div className="col-span-1 md:col-span-2 flex flex-wrap gap-6">
              <Toggle label="Consider Amy’s apartment as an option"
                checked={form.property.amysApartmentOption}
                onChange={v => setForm({ ...form, property: { ...form.property, amysApartmentOption: v } })} />
              <Toggle label="Focus on a family home"
                checked={form.property.focusFamilyHome}
                onChange={v => setForm({ ...form, property: { ...form.property, focusFamilyHome: v } })} />
            </div>
          </Section>

          {/* 2. Funding Position */}
          <Section title="2. Funding Position" subtitle="Resources for deposit, costs and buffers.">
            <Input label="Current savings – AUD" placeholder="$"
              value={form.funding.savingsAud} onChange={e => setForm({ ...form, funding: { ...form.funding, savingsAud: (e.target as HTMLInputElement).value } })} />
            <Input label="Current savings – Overseas" placeholder="$ (currency)"
              value={form.funding.savingsOverseas} onChange={e => setForm({ ...form, funding: { ...form.funding, savingsOverseas: (e.target as HTMLInputElement).value } })} />
            <TextArea label="Expected inheritances or gifts (timing & amounts)"
              value={form.funding.inheritances} onChange={e => setForm({ ...form, funding: { ...form.funding, inheritances: (e.target as HTMLTextAreaElement).value } })} />
            <TextArea label="Existing mortgages (balances, repayments, rates, offsets/redraws)"
              value={form.funding.mortgages} onChange={e => setForm({ ...form, funding: { ...form.funding, mortgages: (e.target as HTMLTextAreaElement).value } })} />
            <TextArea label="Shareholdings (e.g., Uber – value, vesting)"
              value={form.funding.shares} onChange={e => setForm({ ...form, funding: { ...form.funding, shares: (e.target as HTMLTextAreaElement).value } })} />
            <Input label="Other liquid assets available for deposit" placeholder="$"
              value={form.funding.otherLiquid} onChange={e => setForm({ ...form, funding: { ...form.funding, otherLiquid: (e.target as HTMLInputElement).value } })} />
          </Section>

          {/* 3. Income & Tax Residency */}
          <Section title="3. Income & Tax Residency" subtitle="For borrowing capacity and tax structuring.">
            <TextArea label="Employment, salaries and benefits"
              value={form.incomeTax.employment} onChange={e => setForm({ ...form, incomeTax: { ...form.incomeTax, employment: (e.target as HTMLTextAreaElement).value } })} />
            <TextArea label="RSUs, stock options or bonuses"
              value={form.incomeTax.equity} onChange={e => setForm({ ...form, incomeTax: { ...form.incomeTax, equity: (e.target as HTMLTextAreaElement).value } })} />
            <div className="flex flex-col">
              <Label label="Intended residency status for purchase" />
              <select
                value={form.incomeTax.residency}
                onChange={e => setForm({ ...form, incomeTax: { ...form.incomeTax, residency: e.target.value as Form['incomeTax']['residency'] } })}
                className="mt-1 w-full rounded-xl border border-slate-300 px-3 py-2 bg-white"
              >
                <option>Non-resident</option>
                <option>Establish Australian residency</option>
                <option>Undecided</option>
              </select>
            </div>
            <TextArea label="Any tax advice already received on a non-resident purchase"
              value={form.incomeTax.taxAdvice} onChange={e => setForm({ ...form, incomeTax: { ...form.incomeTax, taxAdvice: (e.target as HTMLTextAreaElement).value } })} />
          </Section>

          {/* 4. Family Planning */}
          <Section title="4. Family Planning" subtitle="Sets timing, location and buffers.">
            <div className="flex flex-col">
              <Label label="Plan to have children in the next 2–4 years?" />
              <select
                value={form.family.childrenPlan}
                onChange={e => setForm({ ...form, family: { ...form.family, childrenPlan: e.target.value as Form['family']['childrenPlan'] } })}
                className="mt-1 w-full rounded-xl border border-slate-300 px-3 py-2 bg-white"
              >
                <option>Yes</option>
                <option>No</option>
                <option>Undecided</option>
              </select>
            </div>
            <TextArea label="Planned living arrangements (overseas or Australia)"
              value={form.family.livingArrangements} onChange={e => setForm({ ...form, family: { ...form.family, livingArrangements: (e.target as HTMLTextAreaElement).value } })} />
            <TextArea label="Schooling/childcare considerations affecting timing or location"
              value={form.family.schoolingChildcare} onChange={e => setForm({ ...form, family: { ...form.family, schoolingChildcare: (e.target as HTMLTextAreaElement).value } })} />
          </Section>

          {/* 5. Other Considerations */}
          <Section title="5. Other Considerations" subtitle="Anything else that may shape the strategy.">
            <Input label="Expected timeline for returning to Australia" placeholder="e.g., mid-2027"
              value={form.other.returnTimeline} onChange={e => setForm({ ...form, other: { ...form.other, returnTimeline: (e.target as HTMLInputElement).value } })} />
            <div className="flex flex-col">
              <Label label="Concerns" />
              <div className="mt-2 grid grid-cols-1 sm:grid-cols-2 gap-2">
                {concernsList.map(c => (
                  <label key={c} className="inline-flex items-center gap-2">
                    <input type="checkbox" className="h-4 w-4" checked={form.other.concerns.includes(c)} onChange={() => handleConcern(c)} />
                    <span style={{ color: IPW.navy }}>{c}</span>
                  </label>
                ))}
              </div>
            </div>
            <div className="flex flex-col">
              <Label label="Model what type of purchase?" />
              <select
                value={form.other.investmentVsPPR}
                onChange={e => setForm({ ...form, other: { ...form.other, investmentVsPPR: e.target.value as Form['other']['investmentVsPPR'] } })}
                className="mt-1 w-full rounded-xl border border-slate-300 px-3 py-2 bg-white"
              >
                <option>Principal residence only</option>
                <option>Compare investment property and principal residence</option>
              </select>
            </div>
            <TextArea label="Anything else you would like us to consider"
              value={form.other.notes} onChange={e => setForm({ ...form, other: { ...form.other, notes: (e.target as HTMLTextAreaElement).value } })} />
          </Section>

          {/* Contact & Consent */}
          <section className="bg-white rounded-2xl shadow p-6 border border-slate-100">
            <h2 className="text-xl font-semibold" style={{ color: IPW.navy }}>Contact & Consent</h2>
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
              <Input label="Full name" required placeholder="Clare Smith"
                value={form.contact.fullName} onChange={e => setForm({ ...form, contact: { ...form.contact, fullName: (e.target as HTMLInputElement).value } })} />
              <Input label="Email" required type="email" placeholder="clare@example.com"
                value={form.contact.email} onChange={e => setForm({ ...form, contact: { ...form.contact, email: (e.target as HTMLInputElement).value } })} />
              <Input label="Contact number" placeholder="+61 ..."
                value={form.contact.phone} onChange={e => setForm({ ...form, contact: { ...form.contact, phone: (e.target as HTMLInputElement).value } })} />
              <label className="flex items-center gap-3 mt-2">
                <input type="checkbox" className="h-4 w-4" checked={form.contact.consent} onChange={e => setForm({ ...form, contact: { ...form.contact, consent: e.currentTarget.checked } })} />
                <span className="text-sm" style={{ color: IPW.grey }}>I consent to IPW using this information to prepare modelling and advice.</span>
              </label>
            </div>
          </section>

          {/* Actions */}
          <div className="flex flex-wrap items-center justify-between gap-3">
            <button type="submit" disabled={!valid || submitting} className="rounded-2xl px-6 py-3 text-white disabled:opacity-60"
              style={{ backgroundColor: IPW.navy }}>
              {submitting ? 'Submitting…' : 'Submit checklist'}
            </button>
            <button
              type="button"
              className="rounded-2xl px-5 py-3 border"
              style={{ borderColor: IPW.navy, color: IPW.navy }}
              onClick={() => {
                const data = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(form, null, 2));
                const a = document.createElement('a');
                a.setAttribute('href', data);
                a.setAttribute('download', 'IPW_ClareBen_Checklist.json');
                a.click();
              }}
            >
              Download a copy (JSON)
            </button>
          </div>

          <p className="text-xs" style={{ color: IPW.grey }}>
            Your information is handled confidentially by Integral Private Wealth and used solely to prepare your advice. This form does not constitute personal advice.
          </p>
        </form>
      </div>
    </main>
  );
}

/* ---------- UI bits ---------- */
const Section: React.FC<{ title: string; subtitle?: string; children: React.ReactNode }> = ({ title, subtitle, children }) => (
  <section className="bg-white rounded-2xl shadow p-6 border border-slate-100">
    <h2 className="text-xl font-semibold" style={{ color: IPW.navy }}>{title}</h2>
    {subtitle && <p className="mt-1 text-sm" style={{ color: IPW.grey }}>{subtitle}</p>}
    <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">{children}</div>
  </section>
);

const Label: React.FC<{ label: string; required?: boolean }> = ({ label, required }) => (
  <label className="text-sm font-medium" style={{ color: IPW.navy }}>
    {label}{required && <span className="text-red-600"> *</span>}
  </label>
);

const Input: React.FC<React.InputHTMLAttributes<HTMLInputElement> & { label: string; required?: boolean }> =
  ({ label, required, ...props }) => (
    <div className="flex flex-col">
      <Label label={label} required={required} />
      <input {...props} className="mt-1 w-full rounded-xl border border-slate-300 px-3 py-2 focus:outline-none focus:ring-4 focus:ring-slate-200" />
    </div>
  );

const TextArea: React.FC<React.TextareaHTMLAttributes<HTMLTextAreaElement> & { label: string; required?: boolean }> =
  ({ label, required, ...props }) => (
    <div className="flex flex-col col-span-1 md:col-span-2">
      <Label label={label} required={required} />
      <textarea {...props} className="mt-1 w-full rounded-xl border border-slate-300 px-3 py-2 min-h-[100px] focus:outline-none focus:ring-4 focus:ring-slate-200" />
    </div>
  );

const Toggle: React.FC<{ label: string; checked: boolean; onChange: (v: boolean) => void }> =
  ({ label, checked, onChange }) => (
    <label className="inline-flex items-center gap-3 select-none">
      <button
        type="button"
        onClick={() => onChange(!checked)}
        className={`h-6 w-11 rounded-full transition-colors ${checked ? 'bg-[#003366]' : 'bg-slate-300'}`}
      >
        <span className={`inline-block h-5 w-5 rounded-full bg-white transform transition-transform translate-y-[2px] ${checked ? 'translate-x-[22px]' : 'translate-x-[2px]'}`} />
      </button>
      <span style={{ color: IPW.navy }}>{label}</span>
    </label>
  );

const Header: React.FC = () => (
  <header className="rounded-2xl p-6 shadow" style={{ backgroundColor: IPW.navy }}>
    <div className="flex items-center justify-between gap-4">
      <div className="flex items-center gap-4">
        <img src="/ipw-logo.png" alt="Integral Private Wealth" className="h-12 w-auto" />
        <div>
          <h1 className="text-white text-2xl font-semibold leading-tight">Clare &amp; Ben — Checklist & Fact Finder</h1>
          <p className="text-white/80 text-sm">Integral Private Wealth</p>
        </div>
      </div>
      <div className="hidden md:block text-right">
        <p className="text-white text-sm">Sydney | integralprivatewealth.com.au</p>
      </div>
    </div>
  </header>
);'use client';
import React from 'react';

export default function Page() {
  return (
    <main className="min-h-screen p-10 bg-[linear-gradient(135deg,#BDAEA5,#B4A597)]">
      <img src="/ipw-logo.png" alt="Integral Private Wealth" className="h-12 w-auto mb-6" />
      <h1 className="text-3xl font-bold" style={{ color: '#003366' }}>Clare & Ben – Test</h1>
      <p className="mt-4" style={{ color: '#666666' }}>
        If you can read this, the route and logo work.
      </p>
      <button className="mt-8 rounded-2xl px-6 py-3 text-white" style={{ backgroundColor: '#003366' }}>
        IPW Button
      </button>
    </main>
  );
}
